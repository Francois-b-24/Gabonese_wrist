import pandas as pd
from nettoyage import Nettoyage
import sqlite3
import numpy as np
from Graphique import graphique as rep
import seaborn as sns
path_load = '/Users/f.b/Desktop/Data_Science/Clock_industry/lib/data/montre.db'
path_save = '/Users/f.b/Desktop/Data_Science/Clock_industry/lib/data/base.csv'
def chargement_base(path_load, path_save):
connexion = sqlite3.connect(path_load)
# Exécution d'une requête SQL pour récupérer des données et conversion en DataFrame
df = pd.read_sql_query('SELECT * FROM montre', connexion)
# Fermeture de la connexion
connexion.close()
# Conversion de la base en format CSV
df.to_csv(path_save)
# Chargement de la BDD sans la colonne id:
df = df.iloc[:, 1:]
return df
df = chargement_base(path_load, path_save)
nettoyage = Nettoyage(df)
df = nettoyage.nettoyage_colonnes()
colonnes_a_renseigner = ['matiere_boitier',
'matiere_bracelet',
'sexe',
'diametre',
'etencheite',
'matiere_lunette',
'matiere_verre',
'boucle',
'matiere_boucle',
'rouage',
'reserve_de_marche',
'mouvement']
for col in colonnes_a_renseigner:
df = nettoyage.remplissage(col)
df = nettoyage.remplissage_mouvement()
df = nettoyage.remplissage_reserve_marche()
df = nettoyage.compteur_complications('fonctions')
df = nettoyage.suppression_colonnes()
df = nettoyage.mise_en_forme()
df = nettoyage.nettoyer_matiere_boitier()
df = nettoyage.matiere()
df = nettoyage.mapping_matiere()
df = nettoyage.regroupement_etat_montres()
df = nettoyage.extraction_elements_avant_euro()
df = nettoyage.nettoyer_valeurs('prix')
df = nettoyage.extraction_integer()
rep = rep(df)
# Création d'une variable de prix en logarithme qui nous sera utile lors de modélisation pour respecter les hypothèses des modèles.
df['prix_log'] = np.log(df['prix'])
# Création d'une variable de prix déflatée de 6%. ==> Tiens compte de la commission appliquée sur le prix de vente
df['prix_sc'] = df['prix']*(1-0.06)
df['prix_log'] = np.log(df['prix_sc'])
effectif = rep.effectif_pays()
rep.tab_pays(effectif)
statistic_sorted = rep.stat_pays(effectif)
rep.tab_pays_2(statistic_sorted)
rep.tableau('mouvement')
rep.boxplot('mouvement')
rep.barres('mouvement')
rep.tableau('sexe')
rep.boxplot('sexe')
rep.barres('sexe')
rep.tableau('marque')
rep.tableau('matiere_boitier')
rep.barres('matiere_boitier')
rep.tableau('matiere_bracelet')
rep.barres('matiere_bracelet')
rep.tableau('matiere_bracelet')
rep.barres('matiere_bracelet')
rep.tableau('matiere_lunette')
rep.barres('matiere_lunette')
rep.tableau('matiere_boucle')
rep.barres('matiere_boucle')
rep.tableau('boucle')
rep.barres('boucle')
rep.tableau('comptage_fonctions')
rep.barres('comptage_fonctions')
sns.scatterplot(x=df.diametre, y=df.prix)
sns.scatterplot(x=df.etencheite, y=df.prix)
